# Known Limits
# 1. Anchors are not supported in GHA
# https://github.community/t/support-for-yaml-anchors/16128/90
# 2. today most cloud-based CI services are still lacking hardware acceleration support from the host VM, 
# which is the no.1 blocker for running tests on modern Android Emulators (especially on recent API levels) on CI.

jobs:
- job: Build_NNAPI_EP
  pool: Linux-CPU-2019
  timeoutInMinutes: 30
  workspace:
    clean: all
  condition: notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI')
  steps:
  - task: UsePythonVersion@0
    displayName: Use Python $(pythonVersion)
    inputs:
      versionSpec: $(pythonVersion)

  - script: sudo apt-get update -y && sudo apt-get install -y coreutils ninja-build
    displayName: Install coreutils and ninja

  - script: /bin/bash tools/ci_build/github/android/setup_gradle_wrapper.sh $(pwd)
    displayName: Setup gradle wrapper to use gradle 6.8.3

  # We build the host protoc to <ORT_ROOT>/protobuf_install
  - script: |
      /bin/bash $(Build.SourcesDirectory)/tools/ci_build/github/apple/build_host_protoc.sh \
        $(Build.SourcesDirectory) \
        $(Build.BinariesDirectory)/protobuf \
        $(Build.SourcesDirectory)/protobuf_install
    displayName: Build Host Protoc

  - script: |
      export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
      export ANDROID_HOME=/usr/local/lib/android/sdk
      export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk-bundle
      export ANDROID_NDK_ROOT=/usr/local/lib/android/sdk/ndk-bundle
      env | grep ANDROID
    displayName: set Android ENVs

  # Start switching to jdk 11 after the Android Emulator is started since Android SDK manager requires java 8
  - task: JavaToolInstaller@0
    displayName: Use jdk 11
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  - script: |
      python3 tools/ci_build/build.py \
        --android \
        --build_dir build_nnapi \
        --android_sdk_path $ANDROID_HOME \
        --android_ndk_path $ANDROID_NDK_HOME \
        --android_abi=x86_64 \
        --android_api=29 \
        --skip_submodule_sync \
        --parallel \
        --use_nnapi \
        --cmake_generator=Ninja \
        --path_to_protoc_exe $(Build.SourcesDirectory)/protobuf_install/bin/protoc \
        --build_java \
        --code_coverage \
        --skip_tests
    displayName: NNAPI EP, Build

  - task: CopyFiles@2
    displayName: Copy apks
    inputs:
      contents: 'build_nnapi/**/*.apk'
      targetFolder: $(Build.ArtifactStagingDirectory)
      overWrite: true

  - task: CopyFiles@2
    displayName: Copy apks
    inputs:
      contents: 'build_nnapi/**/*.gcno'
      targetFolder: $(Build.ArtifactStagingDirectory)
      overWrite: true

  - task: CopyFiles@2
    displayName: Copy test data
    inputs:
      contents: 'build_nnapi/**/testdata/**'
      targetFolder: $(Build.ArtifactStagingDirectory)
      overWrite: true

  - task: CopyFiles@2
    displayName: Copy Test Executables
    inputs:
      contents: 'build_nnapi/Debug/*'
      targetFolder: $(Build.ArtifactStagingDirectory)
      overWrite: true

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: NNAPIBuildOutput
      
  - template: templates/clean-agent-build-directory-step.yml

- job: Test_NNAPI_EP
  pool:
    vmImage: 'macOS-11'
  timeoutInMinutes: 90
  workspace:
    clean: all
  dependsOn: Build_NNAPI_EP
  condition: and(succeeded(), notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
  steps:
    - script: |
        set -ex
        system_profiler SPSoftwareDataType SPHardwareDataType
      displayName: 'Mac Agent Info'

    - task: DownloadPipelineArtifact@2
      inputs:
        source: 'current'
        artifact: 'NNAPIBuildOutput'
        path: $(Build.SourcesDirectory)

    - script: |
        /bin/bash tools/ci_build/github/android/update_path.sh ".gcno" $(origin_repo) $(Build.SourcesDirectory)
      displayName: Update gcno path

    - task: UsePythonVersion@0
      displayName: Use Python $(pythonVersion)
      inputs:
        versionSpec: $(pythonVersion)

    - script: |
        python3 tools/python/run_android_emulator.py \
        --android-sdk-root ${ANDROID_SDK_ROOT} \
        --create-avd --system-image "system-images;android-30;google_apis;x86_64" \
        --start --emulator-extra-args="-partition-size 4096" \
        --emulator-pid-file $(Build.BinariesDirectory)/emulator.pid
      displayName: Start Android emulator
      
    - script: |
        python3 tools/ci_build/build.py \
        --android \
        --build_dir build_nnapi \
        --android_sdk_path $ANDROID_HOME \
        --android_ndk_path $ANDROID_NDK_HOME \
        --android_abi=x86_64 \
        --android_api=29 \
        --use_nnapi \
        --code_coverage \
        --test
      displayName: NNAPI EP, Test, CodeCoverage on Android Emulator

    - script: |
        pwd
        echo $(Build.SourcesDirectory)
        find . $(Build.SourcesDirectory)
      displayName: Check Test Output
    - script: |
        python3 -m pip install gcovr && \
        python3 tools/ci_build/coverage.py \
          --build_dir build_nnapi \
          --android_sdk_path $ANDROID_HOME \
          --compile_path $(origin_repo)
      displayName: Retrieve runtime code coverage files from the emulator and analyze
    - script: cat '$(Build.SourcesDirectory)/build_nnapi/Debug/coverage_rpt.txt'
      displayName: Print coverage report

    - task: PublishPipelineArtifact@0
      displayName: 'Publish code coverage report'
      inputs:
        artifactName: "coverage_rpt.txt"
        targetPath: '$(Build.SourcesDirectory)/build_nnapi/Debug/coverage_rpt.txt'
        publishLocation: 'pipeline'

    - script: |
        python3 tools/python/run_android_emulator.py \
          --android-sdk-root ${ANDROID_SDK_ROOT} \
          --stop \
          --emulator-pid-file $(Build.BinariesDirectory)/emulator.pid
      displayName: Stop Android emulator
      condition: always()
      
    - template: templates/clean-agent-build-directory-step.yml
